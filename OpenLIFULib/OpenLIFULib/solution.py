from typing import List, NamedTuple, TYPE_CHECKING
import numpy as np
import slicer
from slicer import vtkMRMLScalarVolumeNode
from slicer.parameterNodeWrapper import parameterPack
from OpenLIFULib.parameter_node_utils import (
    SlicerOpenLIFUSolutionWrapper,
)
from OpenLIFULib.lazyimport import openlifu_lz, xarray_lz
from OpenLIFULib.simulation import (
    make_volume_from_xarray_in_transducer_coords,
    make_xarray_in_transducer_coords_from_volume,
)
from OpenLIFULib.transducer import SlicerOpenLIFUTransducer

if TYPE_CHECKING:
    import openlifu
    import xarray

@parameterPack
class SlicerOpenLIFUSolution:
    """Information that is generated by running the SlicerOpenLIFU planning module"""

    solution : SlicerOpenLIFUSolutionWrapper
    """Underlying openlifu Solution in a thin wrapper"""

    pnp : vtkMRMLScalarVolumeNode
    """Peak negative pressure volume, aggregated over the results from each focus point"""

    intensity : vtkMRMLScalarVolumeNode
    """Average intensity volume, aggregated over the results from each focus point"""

    @staticmethod
    def initialize_from_openlifu_data(
        solution : "openlifu.Solution",
        pnp_datarray : "xarray.DataArray",
        intensity_dataarray : "xarray.DataArray",
        transducer : SlicerOpenLIFUTransducer,
    ) -> "SlicerOpenLIFUSolution":
        """Create a SlicerOpenLIFUSolution from an openlifu Solution and aggregated data arrays to visualize,
        loading those data arrays into the scene as volume nodes.

        Args:
            solution: OpenLIFU Solution
            pnp_datarray: Peak negative pressure volumetric data array to visualize
            intensity_dataarray: Intensity volumetric data array to visualize
            transducer: SlicerOpenLIFUTransducer, needed to put simulation outputs in the right coordinate system
        """

        pnp_volume_node = make_volume_from_xarray_in_transducer_coords(pnp_datarray, transducer)
        intensity_volume_node = make_volume_from_xarray_in_transducer_coords(intensity_dataarray, transducer)

        pnp_volume_node.GetDisplayNode().SetAndObserveColorNodeID("vtkMRMLColorTableNodeFilePlasma.txt")
        intensity_volume_node.GetDisplayNode().SetAndObserveColorNodeID("vtkMRMLColorTableNodeFilePlasma.txt")

        return SlicerOpenLIFUSolution(SlicerOpenLIFUSolutionWrapper(solution),pnp_volume_node,intensity_volume_node)

    def clear_nodes(self) -> None:
        """Clear associated mrml nodes from the scene. Do this when removing a transducer."""
        slicer.mrmlScene.RemoveNode(self.pnp)
        slicer.mrmlScene.RemoveNode(self.intensity)